import fs from 'fs';
import path from 'path';
import puppeteer from 'puppeteer';
import { Document, Packer, Paragraph, TextRun, HeadingLevel } from 'docx';

export interface DocumentExportOptions {
  title: string;
  content: string;
  companyName: string;
  companyAddress?: string;
  companyLogo?: string;
  documentId: string;
  generatedDate: string;
  templateType: string;
}

export async function generatePDF(options: DocumentExportOptions): Promise<Buffer> {
  console.log('Starting PDF generation with options:', {
    title: options.title,
    companyName: options.companyName,
    documentId: options.documentId
  });
  const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${options.title}</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 40px;
        }
        .header {
            text-align: center;
            border-bottom: 3px solid #F97316;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .header h1 {
            color: #F97316;
            font-size: 28px;
            margin: 0;
        }
        .header .subtitle {
            color: #666;
            font-size: 16px;
            margin: 5px 0;
        }
        .document-info {
            background-color: #f8f9fa;
            padding: 20px;
            border-left: 4px solid #F97316;
            margin: 20px 0;
        }
        .document-info h3 {
            margin: 0 0 15px 0;
            color: #333;
        }
        .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }
        .info-item {
            display: flex;
        }
        .info-label {
            font-weight: bold;
            min-width: 120px;
        }
        .content {
            margin: 30px 0;
            white-space: pre-wrap;
        }
        .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 2px solid #F97316;
            text-align: center;
            font-size: 12px;
            color: #666;
        }
        .compliance-badges {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin: 20px 0;
        }
        .badge {
            background-color: #F97316;
            color: white;
            padding: 5px 15px;
            border-radius: 15px;
            font-size: 11px;
            font-weight: bold;
        }
        h2 {
            color: #F97316;
            border-bottom: 1px solid #ddd;
            padding-bottom: 5px;
        }
        @media print {
            body { padding: 20px; }
        }
    </style>
</head>
<body>
    <div class="header">
        <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 20px;">
            <div style="flex: 1;">
                <h1>WorkDoc360</h1>
                <div class="subtitle">Professional Construction Compliance Documents</div>
            </div>
            ${options.companyLogo ? `
            <div style="flex-shrink: 0; margin-left: 20px;">
                <img src="${options.companyLogo}" alt="${options.companyName} Logo" 
                     style="max-height: 80px; max-width: 150px; object-fit: contain;" />
            </div>
            ` : ''}
        </div>
    </div>
    
    <div class="document-info">
        <h3>Document Information</h3>
        <div class="info-grid">
            <div class="info-item">
                <span class="info-label">Document ID:</span>
                <span>${options.documentId}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Generated:</span>
                <span>${options.generatedDate}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Company:</span>
                <span>${options.companyName}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Template:</span>
                <span>${options.templateType}</span>
            </div>
        </div>
        ${options.companyAddress ? `<div style="margin-top: 10px;"><strong>Address:</strong> ${options.companyAddress}</div>` : ''}
    </div>
    
    <h2>${options.title}</h2>
    <div class="content">${options.content}</div>
    
    <div class="footer">
        <div class="compliance-badges">
            <span class="badge">HSE Compliant</span>
            <span class="badge">CDM 2015</span>
            <span class="badge">UK Standards</span>
        </div>
        <p>This document was generated by WorkDoc360 AI-powered compliance system.<br>
        For more information, visit: workdoc360.com</p>
        <p><strong>Generated by WorkDoc360 v1.0</strong></p>
    </div>
</body>
</html>`;

  console.log('Launching Puppeteer browser...');

  // Try different browser configurations
  let browser;
  try {
    // First, try with system chromium
    browser = await puppeteer.launch({
      headless: true,
      executablePath: '/nix/store/zi4f80l169xlmivz8vja8wlphq74qqk0-chromium-125.0.6422.141/bin/chromium-browser',
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--disable-features=VizDisplayCompositor',
        '--disable-extensions',
        '--disable-background-timer-throttling',
        '--disable-backgrounding-occluded-windows',
        '--disable-renderer-backgrounding'
      ]
    });
  } catch (error) {
    console.log('System chromium failed, trying bundled browser...');
    // Fallback to bundled browser
    browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--disable-features=VizDisplayCompositor',
        '--disable-extensions',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor'
      ]
    });
  }

  try {
    console.log('Creating new page...');
    const page = await browser.newPage();

    console.log('Setting page content...');
    await page.setContent(htmlContent, { waitUntil: 'networkidle0' });

    console.log('Generating PDF...');
    const pdfBuffer = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '20mm',
        right: '15mm',
        bottom: '20mm',
        left: '15mm'
      }
    });

    console.log('PDF generated successfully, size:', pdfBuffer.length, 'bytes');
    return Buffer.from(pdfBuffer);
  } catch (error) {
    console.error('Error during PDF generation:', error);
    throw error;
  } finally {
    console.log('Closing browser...');
    await browser.close();
  }
}

export async function generateWord(options: DocumentExportOptions): Promise<Buffer> {
  // Split content into paragraphs
  const contentParagraphs = options.content.split('\n').filter(line => line.trim());

  const doc = new Document({
    sections: [{
      properties: {},
      children: [
        // Header
        new Paragraph({
          children: [
            new TextRun({
              text: "WorkDoc360",
              bold: true,
              size: 32,
              color: "F97316"
            })
          ],
          heading: HeadingLevel.TITLE,
          spacing: { after: 200 }
        }),

        new Paragraph({
          children: [
            new TextRun({
              text: "Professional Construction Compliance Documents",
              italics: true,
              size: 20
            })
          ],
          spacing: { after: 400 }
        }),

        // Document Info Section
        new Paragraph({
          children: [
            new TextRun({
              text: "Document Information",
              bold: true,
              size: 24
            })
          ],
          heading: HeadingLevel.HEADING_1,
          spacing: { before: 200, after: 200 }
        }),

        new Paragraph({
          children: [
            new TextRun({
              text: `Document ID: ${options.documentId}`,
              bold: true
            })
          ],
          spacing: { after: 100 }
        }),

        new Paragraph({
          children: [
            new TextRun({
              text: `Generated: ${options.generatedDate}`,
              bold: true
            })
          ],
          spacing: { after: 100 }
        }),

        new Paragraph({
          children: [
            new TextRun({
              text: `Company: ${options.companyName}`,
              bold: true
            })
          ],
          spacing: { after: 100 }
        }),

        new Paragraph({
          children: [
            new TextRun({
              text: `Template: ${options.templateType}`,
              bold: true
            })
          ],
          spacing: { after: 100 }
        }),

        ...(options.companyAddress ? [new Paragraph({
          children: [
            new TextRun({
              text: `Address: ${options.companyAddress}`,
              bold: true
            })
          ],
          spacing: { after: 200 }
        })] : []),

        // Document Title
        new Paragraph({
          children: [
            new TextRun({
              text: options.title,
              bold: true,
              size: 28,
              color: "F97316"
            })
          ],
          heading: HeadingLevel.HEADING_1,
          spacing: { before: 400, after: 300 }
        }),

        // Content paragraphs
        ...contentParagraphs.map(paragraph => new Paragraph({
          children: [
            new TextRun({
              text: paragraph,
              size: 22
            })
          ],
          spacing: { after: 150 }
        })),

        // Footer
        new Paragraph({
          children: [
            new TextRun({
              text: "Compliance Standards",
              bold: true,
              size: 24
            })
          ],
          heading: HeadingLevel.HEADING_2,
          spacing: { before: 600, after: 200 }
        }),

        new Paragraph({
          children: [
            new TextRun({
              text: "• HSE Guidelines Compliant\n• CDM 2015 Regulations Compliant\n• UK Construction Standards Compliant",
              size: 20
            })
          ],
          spacing: { after: 300 }
        }),

        new Paragraph({
          children: [
            new TextRun({
              text: "This document was generated by WorkDoc360 AI-powered compliance system.",
              italics: true,
              size: 18
            })
          ],
          spacing: { after: 100 }
        }),

        new Paragraph({
          children: [
            new TextRun({
              text: "For more information, visit: workdoc360.com",
              italics: true,
              size: 18
            })
          ],
          spacing: { after: 200 }
        }),

        new Paragraph({
          children: [
            new TextRun({
              text: "Generated by WorkDoc360 v1.0",
              bold: true,
              size: 18,
              color: "F97316"
            })
          ]
        })
      ]
    }]
  });

  return await Packer.toBuffer(doc);
}

export async function emailDocument(
  recipientEmail: string,
  documentTitle: string,
  documentBuffer: Buffer,
  format: 'pdf' | 'word',
  companyName: string
): Promise<boolean> {
  try {
    const { sendEmail } = await import('./emailService');

    const fileExtension = format === 'pdf' ? 'pdf' : 'docx';
    const fileName = `${documentTitle.replace(/[^a-zA-Z0-9]/g, '_')}.${fileExtension}`;

    const emailResult = await sendEmail({
      to: recipientEmail,
      subject: `WorkDoc360 Document: ${documentTitle}`,
      text: `
Dear Team Member,

Please find attached the requested document: ${documentTitle}

This document was generated for ${companyName} using WorkDoc360's AI-powered compliance system.

Document Details:

For any questions about this document, please contact your compliance administrator.

Best regards,
WorkDoc360 Team
      `,
      html: `
<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
  <div style="background-color: #F97316; color: white; padding: 20px; text-align: center;">
    <h1 style="margin: 0;">WorkDoc360</h1>
    <p style="margin: 5px 0 0 0;">Professional Construction Compliance Documents</p>
  </div>
  
  <div style="padding: 30px; background-color: #f9f9f9;">
    <h2 style="color: #333;">Document Delivery</h2>
    <p>Dear Team Member,</p>
    <p>Please find attached the requested document: <strong>${documentTitle}</strong></p>
    
    <div style="background-color: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
      <h3 style="color: #F97316; margin-top: 0;">Document Details</h3>
      <table style="width: 100%; border-collapse: collapse;">
        <tr>
          <td style="padding: 8px 0; border-bottom: 1px solid #eee;"><strong>Company:</strong></td>
          <td style="padding: 8px 0; border-bottom: 1px solid #eee;">${companyName}</td>
        </tr>
        <tr>
          <td style="padding: 8px 0; border-bottom: 1px solid #eee;"><strong>Document:</strong></td>
          <td style="padding: 8px 0; border-bottom: 1px solid #eee;">${documentTitle}</td>
        </tr>
        <tr>
          <td style="padding: 8px 0; border-bottom: 1px solid #eee;"><strong>Format:</strong></td>
          <td style="padding: 8px 0; border-bottom: 1px solid #eee;">${format.toUpperCase()}</td>
        </tr>
        <tr>
          <td style="padding: 8px 0;"><strong>Generated:</strong></td>
          <td style="padding: 8px 0;">${new Date().toLocaleDateString('en-GB')}</td>
        </tr>
      </table>
    </div>
    
    <p>This document was generated using WorkDoc360's AI-powered compliance system, ensuring UK regulatory compliance.</p>
    
    <div style="background-color: #e3f2fd; padding: 15px; border-radius: 8px; margin: 20px 0;">
      <p style="margin: 0; color: #1976d2;"><strong>Note:</strong> For any questions about this document, please contact your compliance administrator.</p>
    </div>
    
    <p>Best regards,<br>WorkDoc360 Team</p>
  </div>
  
  <div style="background-color: #333; color: white; padding: 20px; text-align: center; font-size: 12px;">
    <p style="margin: 0;">WorkDoc360 - AI-Powered Construction Compliance</p>
    <p style="margin: 5px 0 0 0;">Visit us at workdoc360.com</p>
  </div>
</div>
      `,
      // attachments are not supported by the simple EmailParams interface here;
      // send the file via a different channel or upload and include URL in email body instead.
    });

    return emailResult;
  } catch (error) {
    console.error('Error sending document email:', error);
    return false;
  }
}