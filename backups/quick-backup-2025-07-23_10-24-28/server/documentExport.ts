import fs from 'fs';
import path from 'path';

export interface DocumentExportOptions {
  title: string;
  content: string;
  companyName: string;
  companyAddress?: string;
  documentId: string;
  generatedDate: string;
  templateType: string;
}

export async function generatePDF(options: DocumentExportOptions): Promise<Buffer> {
  // In a real implementation, this would use a PDF generation library like puppeteer or jsPDF
  // For now, we'll create a structured text representation
  
  const pdfContent = `
WorkDoc360 - Professional Construction Compliance Documents
${'='.repeat(80)}

Document ID: ${options.documentId}
Generated: ${options.generatedDate}
Template: ${options.templateType}

Company Information:
${'-'.repeat(40)}
${options.companyName}
${options.companyAddress || 'Address not provided'}

Document Title: ${options.title}
${'='.repeat(80)}

${options.content}

${'='.repeat(80)}
This document was generated by WorkDoc360 AI-powered compliance system.
For more information, visit: https://workdoc360.com

Document Footer:
- HSE Guidelines Compliant
- CDM 2015 Regulations Compliant  
- UK Construction Standards Compliant

Generated by WorkDoc360 v1.0
`;

  return Buffer.from(pdfContent, 'utf-8');
}

export async function generateWord(options: DocumentExportOptions): Promise<Buffer> {
  // In a real implementation, this would use a Word generation library like docx
  // For now, we'll create a structured document format
  
  const wordContent = `
<?xml version="1.0" encoding="UTF-8"?>
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:body>
    <w:p>
      <w:r>
        <w:rPr>
          <w:b/>
          <w:sz w:val="24"/>
        </w:rPr>
        <w:t>WorkDoc360 - Professional Construction Compliance</w:t>
      </w:r>
    </w:p>
    
    <w:p>
      <w:r>
        <w:t>Document ID: ${options.documentId}</w:t>
      </w:r>
    </w:p>
    
    <w:p>
      <w:r>
        <w:t>Generated: ${options.generatedDate}</w:t>
      </w:r>
    </w:p>
    
    <w:p>
      <w:r>
        <w:t>Company: ${options.companyName}</w:t>
      </w:r>
    </w:p>
    
    <w:p>
      <w:r>
        <w:rPr>
          <w:b/>
          <w:sz w:val="20"/>
        </w:rPr>
        <w:t>${options.title}</w:t>
      </w:r>
    </w:p>
    
    <w:p>
      <w:r>
        <w:t>${options.content.replace(/\n/g, '</w:t></w:r></w:p><w:p><w:r><w:t>')}</w:t>
      </w:r>
    </w:p>
    
    <w:p>
      <w:r>
        <w:rPr>
          <w:i/>
        </w:rPr>
        <w:t>Generated by WorkDoc360 AI-powered compliance system</w:t>
      </w:r>
    </w:p>
  </w:body>
</w:document>
`;

  return Buffer.from(wordContent, 'utf-8');
}

export async function emailDocument(
  recipientEmail: string,
  documentTitle: string,
  documentBuffer: Buffer,
  format: 'pdf' | 'word',
  companyName: string
): Promise<boolean> {
  try {
    const { sendEmail } = await import('./emailService');
    
    const fileExtension = format === 'pdf' ? 'pdf' : 'docx';
    const fileName = `${documentTitle.replace(/[^a-zA-Z0-9]/g, '_')}.${fileExtension}`;
    
    const emailResult = await sendEmail({
      to: recipientEmail,
      subject: `WorkDoc360 Document: ${documentTitle}`,
      text: `
Dear Team Member,

Please find attached the requested document: ${documentTitle}

This document was generated for ${companyName} using WorkDoc360's AI-powered compliance system.

Document Details:
- Title: ${documentTitle}
- Format: ${format.toUpperCase()}
- Generated: ${new Date().toLocaleDateString('en-GB')}

For any questions about this document, please contact your compliance administrator.

Best regards,
WorkDoc360 Team
      `,
      html: `
<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
  <div style="background-color: #F97316; color: white; padding: 20px; text-align: center;">
    <h1 style="margin: 0;">WorkDoc360</h1>
    <p style="margin: 5px 0 0 0;">Professional Construction Compliance Documents</p>
  </div>
  
  <div style="padding: 30px; background-color: #f9f9f9;">
    <h2 style="color: #333;">Document Delivery</h2>
    <p>Dear Team Member,</p>
    <p>Please find attached the requested document: <strong>${documentTitle}</strong></p>
    
    <div style="background-color: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
      <h3 style="color: #F97316; margin-top: 0;">Document Details</h3>
      <table style="width: 100%; border-collapse: collapse;">
        <tr>
          <td style="padding: 8px 0; border-bottom: 1px solid #eee;"><strong>Company:</strong></td>
          <td style="padding: 8px 0; border-bottom: 1px solid #eee;">${companyName}</td>
        </tr>
        <tr>
          <td style="padding: 8px 0; border-bottom: 1px solid #eee;"><strong>Document:</strong></td>
          <td style="padding: 8px 0; border-bottom: 1px solid #eee;">${documentTitle}</td>
        </tr>
        <tr>
          <td style="padding: 8px 0; border-bottom: 1px solid #eee;"><strong>Format:</strong></td>
          <td style="padding: 8px 0; border-bottom: 1px solid #eee;">${format.toUpperCase()}</td>
        </tr>
        <tr>
          <td style="padding: 8px 0;"><strong>Generated:</strong></td>
          <td style="padding: 8px 0;">${new Date().toLocaleDateString('en-GB')}</td>
        </tr>
      </table>
    </div>
    
    <p>This document was generated using WorkDoc360's AI-powered compliance system, ensuring UK regulatory compliance.</p>
    
    <div style="background-color: #e3f2fd; padding: 15px; border-radius: 8px; margin: 20px 0;">
      <p style="margin: 0; color: #1976d2;"><strong>Note:</strong> For any questions about this document, please contact your compliance administrator.</p>
    </div>
    
    <p>Best regards,<br>WorkDoc360 Team</p>
  </div>
  
  <div style="background-color: #333; color: white; padding: 20px; text-align: center; font-size: 12px;">
    <p style="margin: 0;">WorkDoc360 - AI-Powered Construction Compliance</p>
    <p style="margin: 5px 0 0 0;">Visit us at workdoc360.com</p>
  </div>
</div>
      `,
      attachments: [
        {
          filename: fileName,
          content: documentBuffer,
          type: 'attachment'
        }
      ] as any
    });
    
    return emailResult;
  } catch (error) {
    console.error('Error sending document email:', error);
    return false;
  }
}