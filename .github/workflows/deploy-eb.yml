name: 🚀 Deploy to Elastic Beanstalk (App)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EB_APP_NAME: ${{ secrets.EB_APP_NAME }}
  EB_ENV_NAME: ${{ secrets.EB_ENV_NAME }}
  EB_S3_BUCKET: ${{ secrets.EB_S3_BUCKET }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ☁️ Upload to S3
        run: |
          KEY="app-${{ github.run_id }}.zip"
          zip -r $KEY package.json package-lock.json Procfile .ebextensions dist server
          aws s3 cp $KEY "s3://${{ env.EB_S3_BUCKET }}/$KEY"
          echo "S3_KEY=$KEY" >> $GITHUB_ENV

      - name: 🚀 Create EB application version
        run: |
          LABEL="v${{ github.run_id }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${{ env.EB_APP_NAME }}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ env.EB_S3_BUCKET }}",S3Key="$S3_KEY" \
            --region "${{ env.AWS_REGION }}"
          echo "EB_VERSION_LABEL=$LABEL" >> $GITHUB_ENV

      - name: 🌍 Deploy to EB environment
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${{ env.EB_ENV_NAME }}" \
            --version-label "${{ env.EB_VERSION_LABEL }}" \
            --region "${{ env.AWS_REGION }}"

      - name: 🔎 Show EB Environment status
        run: |
          aws elasticbeanstalk describe-environments --region "${{ env.AWS_REGION }}" \
            --query "Environments[?EnvironmentName=='${{ env.EB_ENV_NAME }}'].[EnvironmentName,VersionLabel,Status,Health,CNAME]" \
            --output table
